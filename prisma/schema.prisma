datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String       @id @default(auto()) @map("_id") @db.ObjectId
  username                String       @unique
  name                    String
  email                   String       @unique
  password                String
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  // otp
  otp                     String?
  otpExpiry               DateTime?
  isVerified              Boolean?     @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  // profile
  profile                 Profile?
  projects                Project[]
  socials                 Social[]
  links                   Link[]
  experiences             Experience[]
  education               Education[]
  pageViews               PageView[]
  skills                  Skill[]      @relation("UserSkills")
  template                Template     @default(BASIC)
  sessions                Session[]
    awards                  Award[]         // Add this line
  certifications          Certification[]
}


model Award {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  issuer      String
  date        DateTime
  description String?
  url         String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
}

model Certification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  issuer       String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?
  url          String?
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
}
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId    String     @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VisitLog {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  portfolioOwner String
  timestamp      DateTime @default(now())
  userAgent      String
  ipAddress      String
}

model Skill {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  level     SkillLevel
  userId    String     @db.ObjectId
  user      User       @relation("UserSkills", fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Profile {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String?  @unique @db.ObjectId
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  picture           String?
  tagline           String?
  bio               String?
  hobbies           String[]
  languages         String[]
  address           String?
  phoneNumber       String?
  levelOfExperience Level?
  yearsOfExperience Int?
}

model PageView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  period    String
  views     Int      @default(0)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [username], references: [username] )

  @@unique([username, period, date])
}

model Project {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String? @db.ObjectId
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String?
  description String?
  link        String?
  githubLink  String?
  image       String?
}

model Link {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  url    String?
  text   String?
}

model Social {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String? @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String?
  link      String?
  isVisible Boolean @default(false)
}

model Experience {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  company     String?
  position    String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
}

model Education {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  institution String?
  degree      String?
  startDate   DateTime?
  endDate     DateTime?
}

model Waitlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

model ScamEmail {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

enum Level {
  Junior
  Mid
  Senior
}

enum Template {
  BASIC
  MODERN
  PROFESSIONAL
  MINIMAL
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}
